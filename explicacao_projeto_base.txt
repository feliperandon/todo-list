 const [todo, setTodo] = useState<TodosType[]>([]);
  const [title, setTitle] = useState("");


Aqui estou criando estados com useState, para gerenciar dados. Faço primeiro um state que vai receber um array do tipo TodosType.

type TodosType = {
  id: string;
  title: string;
  completed: boolean;
};

Ou seja, tudo que vier dentro desse array precisa ter um id, title e completed, a menos que eu use um ? para deixar opcional.


Depois disso crio uma arrow function
const addTodo = (title: string) => {
    const newTodo: TodosType = {
      id: crypto.randomUUID(),
      title,
      completed: false,
    };

    setTodo((prev) => [...prev, newTodo]);
  };

Essa função vai ser responsável por adicionar itens a esse array, um objeto dentro do array.
Crio um objeto chamado newTodo do tipo TodosType, que vai receber um random uui - então cada objeto novo no array vai ter um id único; um title, que vem do outro state que eu criei e um boolean marcando se a tarefa foi completada ou não.

Depois da criação do objeto, eu seto esse novo objeto dentro do array, utilizando o setTodo(), passando uma função que chama um spread operator prev e um segundo argumento que é o objeto criado.


Após isso, crio um handleSubmit para tomar conta da ação do submit do form
const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (title.trim() === "") return;
    addTodo(title);
    setTitle("");
  };

dou um e.preventDefault() para evitar ter aquela ação padrão de enviar o form logo de cara e resetar a pagina
Se o titulo estiver vazio, ele apenas retorna
Se tiver, ele adicionar o title na função addTodo que criei anteriormente
Aí eu limpo o title do input.

Depois disso, crio a função responsável por marcar a tarefa como completa ou não

const toggleCompleted = (id: string) => {
    const comTodos = todo.map((todos) => {
      if (todos.id === id) {
        return {
          ...todos,
          completed: !todos.completed,
        };
      }
      return todos;
    });
    console.log(comTodos);
    return setTodo(comTodos);
  };

Eu recebo um id do tipo string e depois crio uma variável que vai receber o resultado do map
Se o id que a função receber for igual ao id que estava no map, ele vai retornar o spread operator com o array antigo e vai mudar o completed pra opção contraria, se for false ele vira true. (Me explicar o pq eu uso o spread operator ...todos aqui e não ...prev)
Se não entrar na condicional, ele retorna o array modificação
Depois ele seta o novo array no setTodos, substituindo tudo pelo novo arr modificado


Função de deleteTodo
const deleteTodo = (id: string) => {
    setTodo(todo.filter((todos) => todos.id !== id));
  };

Aqui crio a função que recebe um id e ai seto a todo com filter, se o id recebido na func for diferente do id do todos, ele vai filtrar esse objeto com o id igual (Me corrija e explique exatamente oq errei)



Depois disso tudo, entra a parte do JSX

Crio uma div pai que encapsula o titutlo da To-Do List, que tem o form e a iteração de uma lista

onSubmit no form eu utilizo o handleSubmit criado la em cima, feito pra lidar com o envio do form

Depois tenho um input do tipo texto, responsável por guardar o title, usando o onChange com setTitle

Depois crio uma lista não ordenada, que vai ter um map do todo, que é meu array
Dentro vai ter um input checkbox com o toggleCompleted no onChange, passando id, ou seja, se o id aqui for igual o id la no map do toggle, ele vai mudar de false pra true ou vice versa. Alem de ter o task.checked, que vai servir pra mostrar o resultado na tela

Nisso crio uma lista recebendo o task.id

Depois faco o botão de delete, que vai pegar aquela função deleteTodo, que vai receber um id no onChange



 return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-4">To-Do List</h1>
      <form onSubmit={handleSubmit} className="flex gap-2">
        <input
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="border rounded px-2 py-1"
        />
        <button
          className="bg-blue-500 text-white px-4 py-1 rounded cursor-pointer"
          type="submit"
        >
          Add
        </button>
      </form>

      <ul className="mt-4">
        {todo.map((task) => (
          <div className="flex gap-2.5 items-center">
            <li key={task.id} className="py-1">
              <input
                type="checkbox"
                onChange={() => toggleCompleted(task.id)}
                checked={task.completed}
              />
              <span
                className={task.completed ? "line-through text-gray-400" : ""}
              >
                {task.title}
              </span>
              <button
                type="button"
                onClick={() => deleteTodo(task.id)}
                className="cursor-pointer"
              >
                Remove
              </button>
            </li>         
	</div>
        ))}
      </ul>
    </div>
  );
};


